{"ast":null,"code":"var isUnit = function isUnit(value) {\n  return value >= 0 && value <= 1;\n};\n\nvar unitMax = 1;\nvar unitMin = 0;\n\nvar clip = function clip(value) {\n  return Math.max(unitMin, Math.min(unitMax, value));\n};\n\nvar fraction = function fraction(value) {\n  return Math.abs(value % 1);\n};\n\nvar mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n  return (value - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n};\n\nvar mapFrom = function mapFrom(inMin, inMax, value) {\n  return mapRange(inMin, inMax, unitMin, unitMax, value);\n};\n\nvar mapTo = function mapTo(outMin, outMax, unit) {\n  return outMin * (1 - unit) + outMax * unit;\n};\n\nvar wrap = function wrap(value) {\n  if (isUnit(value)) return value;\n  if (value % 1 === 0) return 1;\n  return value < 0 ? unitMax - -value % unitMax : value % unitMax;\n};\n\nvar HALF_PI = Math.PI / 2;\n\nvar radiansToUnit = function radiansToUnit(radians) {\n  return wrap(radians / HALF_PI);\n};\n\nvar subdivision = function subdivision(value) {\n  return unitMax / value;\n};\n\nvar toIndex = function toIndex(length, unit) {\n  return Math.floor(unit * length);\n};\n\nvar bounce = function bounce(unit) {\n  var n1 = 7.5625;\n  var d1 = 2.75;\n\n  if (unit < 1 / d1) {\n    return n1 * unit * unit;\n  } else if (unit < 2 / d1) {\n    var a = unit - 1.5 / d1;\n    return n1 * a * a + 0.75;\n  } else if (unit < 2.5 / d1) {\n    var _a = unit - 2.25 / d1;\n\n    return n1 * _a * _a + 0.9375;\n  } else {\n    var _a2 = unit - 2.625 / d1;\n\n    return n1 * _a2 * _a2 + 0.984375;\n  }\n};\n\nvar center = function center(unit) {\n  return Math.abs(unit * 2 - 1);\n};\n\nvar circular = function circular(unit) {\n  return 1 - Math.sqrt(1 - Math.pow(unit, 2));\n};\n\nvar cosine = function cosine(unit) {\n  return Math.cos(unit * HALF_PI);\n};\n\nvar cubic = function cubic(unit) {\n  return unit * unit * unit;\n};\n\nvar exponential = function exponential(unit) {\n  return unit === 0 ? 0 : Math.pow(2, 10 * unit - 10);\n};\n\nvar inverse = function inverse(unit) {\n  return 1 - unit;\n};\n\nvar linear = function linear(unit) {\n  return unit;\n};\n\nvar quadratic = function quadratic(unit) {\n  return unit * unit;\n};\n\nvar quartic = function quartic(unit) {\n  return unit * unit * unit * unit;\n};\n\nvar quintic = function quintic(unit) {\n  return unit * unit * unit * unit * unit;\n};\n\nvar threshold = function threshold(_threshold, t) {\n  return t < _threshold ? unitMin : unitMax;\n};\n\nvar round = function round(unit) {\n  return threshold(0.5, unit);\n};\n\nvar sine = function sine(unit) {\n  return Math.sin(unit * HALF_PI);\n};\n\nvar triangle = function triangle(unit) {\n  return 1 - Math.abs(unit * 2 - 1);\n};\n\nvar angle = function angle(x, y) {\n  return radiansToUnit(Math.atan(y / x));\n};\n\nvar difference = function difference(a, b) {\n  return Math.abs(a - b);\n};\n\nvar distance = function distance(x, y) {\n  return Math.sqrt(x * x + y * y) / Math.SQRT2;\n};\n\nvar maximum = Math.max;\nvar minimum = Math.min;\n\nvar multiply = function multiply(a, b) {\n  return a * b;\n};\n\nvar offset = function offset(amount, unit) {\n  return wrap(amount + unit);\n};\n\nvar peak = function peak(_peak, unit) {\n  return unit < _peak ? unit / _peak : (unit - _peak) * -1 / (1 - _peak) + 1;\n};\n\nvar quantize = function quantize(fraction, value) {\n  if (fraction === 0) return value;\n  var bands = unitMax / fraction;\n  return Math.round(value * bands) / bands;\n};\n\nvar radial = function radial(x, y) {\n  return 1 - distance(x * 2 - 1, y * 2 - 1);\n};\n\nvar repeat = function repeat(scale, t) {\n  var times = 1 / scale;\n  return t * times % 1;\n};\n\nvar clamp = function clamp(min, max, val) {\n  return val > max ? max : val < min ? min : val;\n};\n\nvar mix = mapTo;\n\nvar toggle = function toggle(a, b, t) {\n  return t < 0.5 ? a : b;\n};\n\nvar branch = function branch(a, b, unit) {\n  return unit > 0.5 ? b(unit) : a(unit);\n};\n\nvar createNearestLookup = function createNearestLookup(length, onSample) {\n  // TODO: could it be 32? or even pass the constructor in so it can be chosen from the outside :`)\n  var lookupTable = new Float64Array(length);\n\n  for (var i = 0; i < length; i++) {\n    lookupTable[i] = onSample(i / length);\n  }\n\n  return function (unit) {\n    return lookupTable[toIndex(length, unit)];\n  };\n};\n\nvar fit = function fit(fns, unit) {\n  var fnsLength = fns.length;\n  var t = repeat(subdivision(fnsLength), unit);\n  var fn = fns[toIndex(fnsLength, unit)];\n  return fn(t);\n};\n\nexport { angle, bounce, branch, center, circular, clamp, clip, cosine, createNearestLookup, cubic, difference, distance, exponential, fit, fraction, inverse, isUnit, linear, mapFrom, mapRange, mapTo, maximum, minimum, mix, multiply, offset, peak, quadratic, quantize, quartic, quintic, radial, radiansToUnit, repeat, round, sine, subdivision, threshold, toIndex, toggle, triangle, unitMax, unitMin, wrap };","map":{"version":3,"sources":["../src/core/isUnit.ts","../src/core/unitMax.ts","../src/core/unitMin.ts","../src/number/clip.ts","../src/number/fraction.ts","../src/number/mapRange.ts","../src/number/mapFrom.ts","../src/number/mapTo.ts","../src/number/wrap.ts","../src/constants.ts","../src/number/radiansToUnit.ts","../src/number/subdivision.ts","../src/number/toIndex.ts","../src/1d/bounce.ts","../src/1d/center.ts","../src/1d/circular.ts","../src/1d/cosine.ts","../src/1d/cubic.ts","../src/1d/exponential.ts","../src/1d/inverse.ts","../src/1d/linear.ts","../src/1d/quadratic.ts","../src/1d/quartic.ts","../src/1d/quintic.ts","../src/2d/threshold.ts","../src/1d/round.ts","../src/1d/sine.ts","../src/1d/triangle.ts","../src/2d/angle.ts","../src/2d/difference.ts","../src/2d/distance.ts","../src/2d/maximum.ts","../src/2d/minimum.ts","../src/2d/multiply.ts","../src/2d/offset.ts","../src/2d/peak.ts","../src/2d/quantize.ts","../src/2d/radial.ts","../src/2d/repeat.ts","../src/3d/clamp.ts","../src/3d/mix.ts","../src/3d/toggle.ts","../src/other/branch.ts","../src/other/createNearestLookup.ts","../src/other/fit.ts"],"names":["isUnit","value","unitMax","unitMin","clip","Math","fraction","mapRange","outMax","inMax","mapFrom","mapTo","outMin","wrap","HALF_PI","radiansToUnit","radians","subdivision","toIndex","unit","bounce","n1","d1","a","center","circular","cosine","cubic","exponential","inverse","linear","quadratic","quartic","quintic","threshold","t","round","sine","triangle","angle","y","difference","distance","x","maximum","minimum","multiply","offset","amount","peak","quantize","bands","radial","repeat","times","clamp","val","mix","toggle","branch","b","createNearestLookup","lookupTable","i","onSample","fit","fnsLength","fns","fn"],"mappings":"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","sourcesContent":["import { Unit } from './Unit'\n\nexport const isUnit = (value: number): value is Unit => {\n  return value >= 0 && value <= 1\n}\n","import { Unit } from './Unit'\n\nexport const unitMax = 1 as Unit\n","import { Unit } from './Unit'\n\nexport const unitMin = 0 as Unit\n","import { Unit } from '../core/Unit'\nimport { unitMin } from '../core/unitMin'\nimport { unitMax } from '../core/unitMax'\n\nexport const clip = (value: number): Unit => {\n  return Math.max(unitMin, Math.min(unitMax, value)) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const fraction = (value: number): Unit => {\n  return Math.abs(value % 1) as Unit\n}\n","export const mapRange = <T extends number = number>(\n  inMin: number,\n  inMax: number,\n  outMin: T,\n  outMax: T,\n  value: number\n): T => {\n  return (((value - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin) as T\n}\n","import { Unit } from '../core/Unit'\nimport { unitMin } from '../core/unitMin'\nimport { unitMax } from '../core/unitMax'\nimport { mapRange } from './mapRange'\n\nexport const mapFrom = (inMin: number, inMax: number, value: number): Unit => {\n  return mapRange(inMin, inMax, unitMin, unitMax, value)\n}\n","import { Unit } from '../core/Unit'\n\nexport const mapTo = <T extends number = number>(\n  outMin: number,\n  outMax: number,\n  unit: Unit\n): T => {\n  return (outMin * (1 - unit) + outMax * unit) as T\n}\n","import { unitMax } from '../core/unitMax'\nimport { Unit } from '../core/Unit'\nimport { isUnit } from '../core/isUnit'\n\nexport const wrap = (value: number): Unit => {\n  if (isUnit(value)) return value\n\n  if (value % 1 === 0) return 1 as Unit\n\n  return (value < 0 ? unitMax - (-value % unitMax) : value % unitMax) as Unit\n}\n","export const HALF_PI = Math.PI / 2\nexport const TWO_PI = Math.PI * 2\n","import { Unit } from '../core/Unit'\nimport { wrap } from './wrap'\nimport { HALF_PI } from '../constants'\n\nexport const radiansToUnit = (radians: number): Unit => {\n  return wrap(radians / HALF_PI)\n}\n","import { Unit } from '../core/Unit'\nimport { unitMax } from '../core/unitMax'\n\nexport const subdivision = (value: number): Unit => {\n  return (unitMax / value) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const toIndex = (length: number, unit: Unit): number => {\n  return Math.floor(unit * length)\n}\n","import { Unit } from '../core/Unit'\n\nexport const bounce = (unit: Unit): Unit => {\n  const n1 = 7.5625\n  const d1 = 2.75\n\n  if (unit < 1 / d1) {\n    return (n1 * unit * unit) as Unit\n  } else if (unit < 2 / d1) {\n    const a = unit - 1.5 / d1\n    return (n1 * a * a + 0.75) as Unit\n  } else if (unit < 2.5 / d1) {\n    const a = unit - 2.25 / d1\n    return (n1 * a * a + 0.9375) as Unit\n  } else {\n    const a = unit - 2.625 / d1\n    return (n1 * a * a + 0.984375) as Unit\n  }\n}\n","import { Unit } from '../'\n\nexport const center = (unit: Unit): Unit => {\n  return Math.abs(unit * 2 - 1)\n}\n","import { Unit } from '../core/Unit'\n\nexport const circular = (unit: Unit): Unit => {\n  return (1 - Math.sqrt(1 - Math.pow(unit, 2))) as Unit\n}\n","import { Unit } from '../core/Unit'\nimport { HALF_PI } from '../constants'\n\nexport const cosine = (unit: Unit): Unit => {\n  return Math.cos(unit * HALF_PI) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const cubic = (unit: Unit): Unit => {\n  return (unit * unit * unit) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const exponential = (unit: Unit): Unit => {\n  return (unit === 0 ? 0 : Math.pow(2, 10 * unit - 10)) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const inverse = (unit: Unit): Unit => {\n  return (1 - unit) as Unit\n}\n","import { Unit } from 'core/Unit'\n\nexport const linear = (unit: Unit): Unit => {\n  return unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const quadratic = (unit: Unit): Unit => {\n  return (unit * unit) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const quartic = (unit: Unit): Unit => {\n  return (unit * unit * unit * unit) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const quintic = (unit: Unit): Unit => {\n  return (unit * unit * unit * unit * unit) as Unit\n}\n","import { unitMax } from '../core/unitMax'\nimport { unitMin } from '../core/unitMin'\nimport { Unit } from 'core/Unit'\n\nexport const threshold = (threshold: Unit, t: Unit): Unit => {\n  return t < threshold ? unitMin : unitMax\n}\n","import { threshold } from '../2d/threshold'\nimport { Unit } from '../core/Unit'\n\nexport const round = (unit: Unit): Unit => {\n  return threshold(0.5 as Unit, unit)\n}\n","import { Unit } from '../core/Unit'\nimport { HALF_PI } from '../constants'\n\nexport const sine = (unit: Unit): Unit => {\n  return Math.sin(unit * HALF_PI) as Unit\n}\n","import { Unit } from '../core/Unit'\n\nexport const triangle = (unit: Unit): Unit => {\n  return 1 - Math.abs(unit * 2 - 1)\n}\n","import { Unit } from '../core/Unit'\nimport { radiansToUnit } from '../number/radiansToUnit'\n\nexport const angle = (x: Unit, y: Unit): Unit => {\n  return radiansToUnit(Math.atan(y / x))\n}\n","import { Unit } from '../core/Unit'\n\nexport const difference = (a: Unit, b: Unit): Unit => {\n  return Math.abs(a - b)\n}\n","import { Unit } from '../core/Unit'\n\nexport const distance = (x: Unit, y: Unit): Unit => {\n  return Math.sqrt(x * x + y * y) / Math.SQRT2\n}\n","import { Unit } from 'core/Unit'\n\nexport const maximum = Math.max as (a: Unit, b: Unit) => Unit\n","import { Unit } from 'core/Unit'\n\nexport const minimum = Math.min as (a: Unit, b: Unit) => Unit\n","import { Unit } from '../core/Unit'\n\nexport const multiply = (a: Unit, b: Unit): Unit => {\n  return (a * b) as Unit\n}\n","import { wrap } from '../number/wrap'\nimport { Unit } from 'core/Unit'\n\nexport const offset = (amount: Unit, unit: Unit): Unit => {\n  return wrap(amount + unit)\n}\n","import { Unit } from '../core/Unit'\n\nexport const peak = (peak: Unit, unit: Unit): Unit => {\n  return unit < peak ? unit / peak : ((unit - peak) * -1) / (1 - peak) + 1\n}\n","import { Unit } from '../core/Unit'\nimport { unitMax } from '../core/unitMax'\n\nexport const quantize = (fraction: Unit, value: Unit): Unit => {\n  if (fraction === 0) return value\n\n  const bands = unitMax / fraction\n\n  return Math.round(value * bands) / bands\n}\n","import { distance } from './distance'\n\n// TODO: is this unit and should it be in this dir?\nexport const radial = (x: number, y: number) => {\n  return 1 - distance(x * 2 - 1, y * 2 - 1)\n}\n","import { Unit } from 'core/Unit'\n\nexport const repeat = (scale: Unit, t: Unit): Unit => {\n  const times = 1 / scale\n  return ((t * times) % 1) as Unit\n}\n","import { Unit } from 'core/Unit'\n\nexport const clamp = (min: Unit, max: Unit, val: Unit): Unit => {\n  return val > max ? max : val < min ? min : val\n}\n","import { mapTo } from '../number/mapTo'\nimport { Unit } from 'core/Unit'\n\n// typed alias\nexport const mix = mapTo as (a: Unit, b: Unit, t: Unit) => Unit\n","import { Unit } from 'core/Unit'\n\nexport const toggle = (a: Unit, b: Unit, t: Unit): Unit => {\n  return t < 0.5 ? a : b\n}\n","import { Unit } from 'core/Unit'\n\nexport const branch = (\n  a: (unit: Unit) => Unit,\n  b: (unit: Unit) => Unit,\n  unit: Unit\n) => {\n  return unit > 0.5 ? b(unit) : a(unit)\n}\n","import { Unit } from '..'\nimport { toIndex } from '../number/toIndex'\n\nexport const createNearestLookup = (\n  length: number,\n  onSample: (unit: Unit) => Unit\n) => {\n  // TODO: could it be 32? or even pass the constructor in so it can be chosen from the outside :`)\n  const lookupTable = new Float64Array(length)\n\n  for (let i = 0; i < length; i++) {\n    lookupTable[i] = onSample(i / length)\n  }\n\n  return (unit: Unit) => {\n    return lookupTable[toIndex(length, unit)]\n  }\n}\n","import { Unit } from '../core/Unit'\nimport { repeat } from '../2d/repeat'\nimport { subdivision } from '../number/subdivision'\nimport { toIndex } from '../number/toIndex'\n\nexport const fit = (fns: Array<(unit: Unit) => Unit>, unit: Unit): Unit => {\n  const fnsLength = fns.length\n  const t = repeat(subdivision(fnsLength), unit)\n  const fn = fns[toIndex(fnsLength, unit)]\n\n  return fn(t)\n}\n"]},"metadata":{},"sourceType":"module"}