{"ast":null,"code":"var _jsxFileName = \"C:\\\\For Personal Use\\\\Django Projects\\\\github\\\\django-react\\\\a\\\\reactjs\\\\src\\\\pages\\\\compenents\\\\map.jsx\";\nimport React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport Map from \"./Map\";\nimport \"./style.css\";\nimport \"./config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MapContainer extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"button\",\n        value: \"Delete \",\n        id: \"myBtn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Map, {\n        id: \"myMap\",\n        options: {\n          center: {\n            lat: 14.6091,\n            lng: 121.0223\n          },\n          zoom: 12\n        },\n        onMapLoad: map => {\n          let placeArray = [];\n          let markersArray = [];\n          let polylinePath = [];\n          let polyline; //putting the places from config.js in an array\n\n          {\n            places.map(markerJson => placeArray.push(markerJson));\n          } //Adding Marker for each coordinate in the array\n\n          for (let i = 0; i < placeArray.length; i++) {\n            addMarker({\n              lat: placeArray[i].lat,\n              lng: placeArray[i].lng\n            });\n          } //function for creating polyline\n\n\n          createPolyline();\n          document.getElementById(\"myBtn\").addEventListener(\"click\", function () {\n            //Removing marker of the last coordinate in the map\n            markersArray[placeArray.length - 1].setMap(null); //removing last object in the place and marker array\n\n            placeArray.pop();\n            markersArray.pop(); //Removing polyline in the map\n\n            polyline.setMap(null); //function for creating new polyline using the path that does not include the deleted coordinate\n\n            createPolyline();\n          });\n\n          function createPolyline() {\n            //clearing polyline Path array\n            polylinePath = []; //putting the coordinates in the polylinepath array to be used as the path of polyline\n\n            for (let i = 0; i < placeArray.length; i++) {\n              polylinePath.push({\n                lat: placeArray[i].lat,\n                lng: placeArray[i].lng\n              });\n            } //creating polyline\n\n\n            polyline = new google.maps.Polyline({\n              path: polylinePath,\n              geodesic: true,\n              strokeColor: \"#FF0000\",\n              strokeOpacity: 1.0,\n              strokeWeight: 2\n            }); //showing polyline in the map\n\n            polyline.setMap(map);\n          } // Adds a marker to the map and push to the array.\n\n\n          function addMarker(location) {\n            //creating new marker\n            const marker = new google.maps.Marker({\n              position: location,\n              map: map\n            }); //putting the created marker in the markers array to be easily deleted in the map\n\n            markersArray.push(marker);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MapContainer;","map":{"version":3,"sources":["C:/For Personal Use/Django Projects/github/django-react/a/reactjs/src/pages/compenents/map.jsx"],"names":["React","Component","render","Map","MapContainer","center","lat","lng","zoom","map","placeArray","markersArray","polylinePath","polyline","places","markerJson","push","i","length","addMarker","createPolyline","document","getElementById","addEventListener","setMap","pop","google","maps","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","location","marker","Marker","position"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;AACA,OAAO,UAAP;;;AAEA,MAAMC,YAAN,SAA2BH,SAA3B,CAAqC;AACnCC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,SAA3B;AAAqC,QAAA,EAAE,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,GAAD;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,OAAO,EAAE;AACPG,UAAAA,MAAM,EAAE;AAAEC,YAAAA,GAAG,EAAE,OAAP;AAAgBC,YAAAA,GAAG,EAAE;AAArB,WADD;AAEPC,UAAAA,IAAI,EAAE;AAFC,SAFX;AAME,QAAA,SAAS,EAAGC,GAAD,IAAS;AAClB,cAAIC,UAAU,GAAG,EAAjB;AACA,cAAIC,YAAY,GAAG,EAAnB;AACA,cAAIC,YAAY,GAAG,EAAnB;AACA,cAAIC,QAAJ,CAJkB,CAKlB;;AACA;AACEC,YAAAA,MAAM,CAACL,GAAP,CAAYM,UAAD,IAAgBL,UAAU,CAACM,IAAX,CAAgBD,UAAhB,CAA3B;AACD,WARiB,CAUlB;;AACA,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CE,YAAAA,SAAS,CAAC;AAAEb,cAAAA,GAAG,EAAEI,UAAU,CAACO,CAAD,CAAV,CAAcX,GAArB;AAA0BC,cAAAA,GAAG,EAAEG,UAAU,CAACO,CAAD,CAAV,CAAcV;AAA7C,aAAD,CAAT;AACD,WAbiB,CAclB;;;AACAa,UAAAA,cAAc;AAEdC,UAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,gBAAjC,CAAkD,OAAlD,EAA2D,YAAY;AACnE;AACAZ,YAAAA,YAAY,CAACD,UAAU,CAACQ,MAAX,GAAoB,CAArB,CAAZ,CAAoCM,MAApC,CAA2C,IAA3C,EAFmE,CAGnE;;AACAd,YAAAA,UAAU,CAACe,GAAX;AACAd,YAAAA,YAAY,CAACc,GAAb,GALmE,CAMnE;;AACAZ,YAAAA,QAAQ,CAACW,MAAT,CAAgB,IAAhB,EAPmE,CAQnE;;AACAJ,YAAAA,cAAc;AACjB,WAVD;;AAaA,mBAASA,cAAT,GAA0B;AACzB;AACCR,YAAAA,YAAY,GAAG,EAAf,CAFwB,CAGzB;;AACC,iBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CL,cAAAA,YAAY,CAACI,IAAb,CAAkB;AAChBV,gBAAAA,GAAG,EAAEI,UAAU,CAACO,CAAD,CAAV,CAAcX,GADH;AAEhBC,gBAAAA,GAAG,EAAEG,UAAU,CAACO,CAAD,CAAV,CAAcV;AAFH,eAAlB;AAID,aATuB,CAWxB;;;AACAM,YAAAA,QAAQ,GAAG,IAAIa,MAAM,CAACC,IAAP,CAAYC,QAAhB,CAAyB;AAClCC,cAAAA,IAAI,EAAEjB,YAD4B;AAElCkB,cAAAA,QAAQ,EAAE,IAFwB;AAGlCC,cAAAA,WAAW,EAAE,SAHqB;AAIlCC,cAAAA,aAAa,EAAE,GAJmB;AAKlCC,cAAAA,YAAY,EAAE;AALoB,aAAzB,CAAX,CAZwB,CAmBxB;;AACApB,YAAAA,QAAQ,CAACW,MAAT,CAAgBf,GAAhB;AACD,WAnDiB,CAoDlB;;;AACA,mBAASU,SAAT,CAAmBe,QAAnB,EAA6B;AAC3B;AACA,kBAAMC,MAAM,GAAG,IAAIT,MAAM,CAACC,IAAP,CAAYS,MAAhB,CAAuB;AACpCC,cAAAA,QAAQ,EAAEH,QAD0B;AAEpCzB,cAAAA,GAAG,EAAEA;AAF+B,aAAvB,CAAf,CAF2B,CAM3B;;AACAE,YAAAA,YAAY,CAACK,IAAb,CAAkBmB,MAAlB;AACD;AACF;AApEH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2ED;;AA7EkC;;AAgFrC,eAAe/B,YAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport Map from \"./Map\";\r\nimport \"./style.css\";\r\nimport \"./config\";\r\n\r\nclass MapContainer extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"container\">\r\n        <input type=\"button\" value=\"Delete \" id=\"myBtn\" />\r\n        <Map\r\n          id=\"myMap\"\r\n          options={{\r\n            center: { lat: 14.6091, lng: 121.0223 },\r\n            zoom: 12,\r\n          }}\r\n          onMapLoad={(map) => {\r\n            let placeArray = [];\r\n            let markersArray = [];\r\n            let polylinePath = [];\r\n            let polyline;\r\n            //putting the places from config.js in an array\r\n            {\r\n              places.map((markerJson) => placeArray.push(markerJson));\r\n            }\r\n            \r\n            //Adding Marker for each coordinate in the array\r\n            for (let i = 0; i < placeArray.length; i++) {\r\n              addMarker({ lat: placeArray[i].lat, lng: placeArray[i].lng });\r\n            }\r\n            //function for creating polyline\r\n            createPolyline();\r\n\r\n            document.getElementById(\"myBtn\").addEventListener(\"click\", function () {\r\n                //Removing marker of the last coordinate in the map\r\n                markersArray[placeArray.length - 1].setMap(null);\r\n                //removing last object in the place and marker array\r\n                placeArray.pop();\r\n                markersArray.pop();\r\n                //Removing polyline in the map\r\n                polyline.setMap(null);\r\n                //function for creating new polyline using the path that does not include the deleted coordinate\r\n                createPolyline();\r\n            })\r\n\r\n          \r\n            function createPolyline() {\r\n             //clearing polyline Path array\r\n              polylinePath = [];\r\n             //putting the coordinates in the polylinepath array to be used as the path of polyline\r\n              for (let i = 0; i < placeArray.length; i++) {\r\n                polylinePath.push({\r\n                  lat: placeArray[i].lat,\r\n                  lng: placeArray[i].lng,\r\n                });\r\n              }\r\n              \r\n              //creating polyline\r\n              polyline = new google.maps.Polyline({\r\n                path: polylinePath,\r\n                geodesic: true,\r\n                strokeColor: \"#FF0000\",\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 2,\r\n              })\r\n              //showing polyline in the map\r\n              polyline.setMap(map);\r\n            }\r\n            // Adds a marker to the map and push to the array.\r\n            function addMarker(location) {\r\n              //creating new marker\r\n              const marker = new google.maps.Marker({\r\n                position: location,\r\n                map: map,\r\n              });\r\n              //putting the created marker in the markers array to be easily deleted in the map\r\n              markersArray.push(marker);\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MapContainer;\r\n"]},"metadata":{},"sourceType":"module"}